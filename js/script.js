(()=>{const a=(o,e,t)=>{let n;return function(){let r=this,s=arguments,c=()=>{n=null,t||o.apply(r,s)},d=t&&!n;clearTimeout(n),n=setTimeout(c,e),d&&o.apply(r,s)}};(function(o,e,t,n,r){o.Sender=r,o[r]=o[r]||function(){(o[r].q=o[r].q||[]).push(arguments)},o[r].l=1*new Date;var s=e.createElement(t);s.async=1,s.src=n,document.head.append(s)})(window,document,"script","https://cdn.sender.net/accounts_resources/universal.js","sender");sender("b2aa78d27b1267");window.onload=()=>{var o=document.querySelectorAll(".lazy");o.forEach(e=>{var t=new Image;t.src=e.getAttribute("data-src"),t.sizes=e.hasAttribute("data-sizes")?e.getAttribute("data-sizes"):"",t.srcset=e.hasAttribute("data-srcset")?e.getAttribute("data-srcset"):"",t.className=e.getAttribute("class"),t.title=e.getAttribute("title"),t.alt=e.getAttribute("alt"),t.onload=function(){e.src=e.getAttribute("data-src"),e.sizes=e.hasAttribute("data-sizes")?e.getAttribute("data-sizes"):"",e.srcset=e.hasAttribute("data-srcset")?e.getAttribute("data-srcset"):"",e.classList.add("loaded")}})};const i=document.querySelector("header.header"),l=a(function(){window.scrollY?i.classList.add("scrolled"):i.classList.remove("scrolled")},50);document.addEventListener("scroll",l);l();})();
//# sourceMappingURL=data:application/json;base64,
